buildscript{
    repositories {
        jcenter()
    }
    dependencies{
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}



plugins {
    id 'java-library'
    id 'maven-publish'
}

apply plugin: 'com.jfrog.bintray'

group 'uk.co.electronstudio.mobcontrol'
version '0.1.4'
ext.ver = version
project.ext.mainClassName = "uk.co.electronstudio.mobcontrol.MobTest"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    api group: 'org.eclipse.jetty.websocket', name: 'websocket-api', version: '9.4.24.v20191120'
    api group: 'org.eclipse.jetty.websocket', name: 'websocket-server', version: '9.4.24.v20191120'
    api "com.badlogicgames.gdx:gdx:1.9.9"
    api "com.badlogicgames.gdx:gdx-controllers:1.9.9"
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
}

jar{
//    from files(sourceSets.main.output.classesDir)
//    from files(sourceSets.main.output.resourcesDir)
//    from {configurations.compile.collect {zipTree(it)}}

    manifest {
        attributes 'Main-Class': project.ext.mainClassName
    }
}

task uberjar(dependsOn: classes, type: Jar) {
    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.test.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}

    manifest {
        attributes 'Main-Class': project.ext.mainClassName

    }
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
javadoc {
    exclude 'com/studiohartman/jamepad/**'
    exclude 'com/badlogic/**'
    destinationDir = new File('docs')
    //options.overview = "overview.html"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name "GPLv3 with Classpath Exception"
            url "https://www.gnu.org/software/classpath/license.html"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "electronstudio"
            name "Electron Studio"
            email "support@electronstudio.co.uk"
        }
    }

    scm {
        url "https://github.com/electronstudio/"
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId 'uk.co.electronstudio.mobcontrol'
            artifactId 'mobcontrol'
            version ver

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Use mobile devices as game controllers')
                root.appendNode('name', 'MobControlJava')
                root.appendNode('url', 'https://github.com/electronstudio/MobControlJava')
                root.children().last() + pomConfig
            }
        }
    }
    publish.dependsOn jar, sourcesJar, javadocJar//, generatePomFileForMavenPublicationPublication
}

String keyString = ''
File file = new File(System.getProperty("user.home")+"/bintray.key")
if(file.exists()){
    keyString = file.text.trim()
}

bintray {
    user = 'electronstudio' //System.getenv('BINTRAY_USER')
    key = keyString //System.getenv('BINTRAY_KEY')
    publications = ['mavenPublication']
    publish = true
    override = true
    pkg {
        repo = 'MobControlJava'
        name = 'MobControlJava'
        userOrg = 'electronstudio'
        licenses = ["GPL-2.0+CE"]
        vcsUrl = 'https://github.com/electronstudio/MobControlJava.git'
        version {
            name = ver
            desc = ver
            released  = new Date()
            vcsTag = ver
        }
    }
}

bintrayUpload.dependsOn publish
